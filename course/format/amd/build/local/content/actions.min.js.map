{"version":3,"sources":["../../../src/local/content/actions.js"],"names":["strings","requiredStrings","key","then","importedStrings","Object","entries","index","requiredString","catch","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","TOGGLER","ADDSECTION","classes","LOCKED","addEventListener","element","_dispatchClick","watch","handler","_checkSectionlist","event","target","closest","methodName","_actionMethodName","dataset","action","requestName","charAt","toUpperCase","slice","_setAddSectionLocked","sectionlist","length","maxsections","sectionId","id","sectionInfo","reactive","get","preventDefault","exporter","getExporter","data","course","state","sectionid","sectiontitle","title","modalParams","movecoursesection","body","Templates","render","_showModal","modal","modalBody","_extractElement","getBody","currentElement","querySelector","_changeTagName","generalSection","tagName","for","dispatch","destroy","cmId","cmInfo","cmid","cmname","movecoursemodule","click","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","cmList","hassummary","rawtitle","confirm","saveButtonText","delete","type","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","e","locked","targets","getElements","forEach","classList","toggle","setElementLocked","Element","Error","newTagName","newElement","document","createElement","innerHTML","parentNode","replaceChild","Promise","resolve","reject","create","bodyRendered","setSaveButtonText","show","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings, get_string as getString} from 'core/str';\n\n// Load global strings.\nconst strings = {};\n\nconst requiredStrings = [\n    {key: 'movecoursesection'},\n    {key: 'movecoursemodule'},\n    {key: 'confirm'},\n    {key: 'delete'},\n];\n\ngetStrings(requiredStrings).then((importedStrings) => {\n    for (const [index, requiredString] of Object.entries(requiredStrings)) {\n        strings[requiredString.key] = importedStrings[index];\n    }\n    return;\n}).catch();\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            TOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n        };\n        // Default classes.\n        this.classes = {\n            LOCKED: 'dimmed',\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     */\n    stateReady() {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n\n        // Invoke proper method.\n        const methodName = this._actionMethodName(target.dataset.action);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @property {Object} element the course state object.\n     */\n    _checkSectionlist({element}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(element.sectionlist.length > element.maxsections);\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: strings.movecoursesection,\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._showModal(modalParams);\n\n        const modalBody = this._extractElement(modal.getBody());\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._changeTagName(currentElement, 'span');\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._changeTagName(generalSection, 'span');\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n\n            const target = event.target;\n            if (target.tagName != 'A' || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n\n            event.preventDefault();\n\n            this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id);\n            modal.destroy();\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n\n        if (!cmId) {\n            return;\n        }\n\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: strings.movecoursemodule,\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._showModal(modalParams);\n\n        const modalBody = this._extractElement(modal.getBody());\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        currentElement = this._changeTagName(currentElement, 'span');\n\n        // Open the cm section node if possible.\n        currentElement.closest(this.selectors.SECTIONNODE)?.querySelector(this.selectors.TOGGLER)?.click();\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n\n            const target = event.target;\n            if (target.tagName != 'A' || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            modal.destroy();\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: strings.confirm,\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: strings.delete,\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._showModal(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.LOCKED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Extract the DOM element from the param.\n     *\n     * Modals uses jQuery instead of vnailla JS. To prevent future problems, we use this method to\n     * normalize the element beforte using.\n     *\n     * @param {Node|Element} element DOM element or a jQuery object.\n     * @return {Element} the extracted element.\n     */\n    _extractElement(element) {\n        if (element instanceof Element) {\n            return element;\n        }\n        if (element.get !== undefined) {\n            return element.get(0);\n        }\n        throw Error(`Elements can only be extracted from js Element or jQuery nodes`);\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     * @param {*} newTagName the new tag name\n     * @returns {Element} the new element or the original one if no change is made\n     */\n    _changeTagName(element, newTagName) {\n        if (element) {\n            const newElement = document.createElement(newTagName);\n            newElement.innerHTML = element.innerHTML;\n            element.parentNode.replaceChild(newElement, element);\n            return newElement;\n        }\n        return element;\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _showModal(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n}\n"],"file":"actions.min.js"}